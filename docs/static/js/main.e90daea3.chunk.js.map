{"version":3,"sources":["components/CharacterCard.js","components/CharacterList.js","services/Fetch.js","components/Searcher.js","components/Modal.js","components/Header.js","components/App.js","serviceWorker.js","index.js"],"names":["CharacterCard","props","name","description","picture","className","src","alt","title","type","onClick","openModal","CharacterList","data","map","item","key","id","thumbnail","path","extension","ENDPOINT","fetchResult","inputValue","fetch","then","response","json","Searcher","useState","setInputValue","placeholder","value","onChange","event","target","connectApi","Modal","heroData","onCloseModal","Header","App","setData","infoHero","setInfoHero","appContainer","document","querySelector","classList","remove","respuesta","results","add","hero","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"gQAkBeA,EAhBO,SAACC,GAAW,IACtBC,EAA+BD,EAA/BC,KAAMC,EAAyBF,EAAzBE,YAAaC,EAAYH,EAAZG,QAK3B,OACI,oCACI,yBAAKC,UAAU,sBACX,yBAAKC,IAAKF,EAASG,IAAKL,EAAMM,MAAON,KAEzC,wBAAIG,UAAU,mBAAmBH,GACjC,4BAAQG,UAAU,iBAAiBI,KAAK,SAASC,QATnC,WAClBT,EAAMU,UAAU,CAAET,OAAMC,cAAaC,cAQjC,iBCEGQ,EAbO,SAACX,GAAW,IACtBY,EAAoBZ,EAApBY,KAAMF,EAAcV,EAAdU,UACd,OACI,wBAAIN,UAAU,mBAAmBQ,EAAKC,KAAI,SAAAC,GAAI,OAAI,wBAAIV,UAAU,uBAAuBW,IAAKD,EAAKE,IAC7F,kBAAC,EAAD,CACIf,KAAMa,EAAKb,KACXC,YAAaY,EAAKZ,YAClBQ,UAAWA,EACXP,QAASW,EAAKG,UAAUC,KAAO,IAAMJ,EAAKG,UAAUE,kBCV9DC,EAAW,kJAKFC,EAJK,SAACC,GAAD,OAAgBC,MAChCD,EAAaF,EAAW,mBAAqBE,EAAaF,GAC5DI,MAAK,SAAAC,GAAQ,OAAIA,EAASC,WCqBbC,EAvBE,SAAC3B,GAAU,IAAD,EACa4B,mBAAS,IADtB,mBAChBN,EADgB,KACLO,EADK,KAWvB,OACI,yBAAKzB,UAAU,uBACX,2BACA0B,YAAY,WACZtB,KAAK,OACLuB,MAAOT,EACPU,SAdgB,SAACC,GACrBJ,EAAcI,EAAMC,OAAOH,UAevB,4BAAQ3B,UAAU,mBAAmBK,QAZvB,WAClBT,EAAMmC,WAAWb,KAWb,YCCGc,EApBD,SAACpC,GAAW,IACdqC,EAAarC,EAAbqC,SAMR,OACI,yBAAKjC,UAAU,oBACX,yBAAKA,UAAU,oBACf,4BAAQA,UAAU,eAAeK,QAPtB,WACfT,EAAMsC,iBAMF,WACA,yBAAKlC,UAAU,gBACX,yBAAKC,IAAKgC,EAASlC,QAASG,IAAK+B,EAASpC,KAAMA,KAAMoC,EAASpC,QAEnE,wBAAIG,UAAU,eAAeiC,EAASpC,MACtC,2BAAIoC,EAASnC,gBCVVqC,EALA,WACX,OACI,gCAAQ,2DC0CDC,G,MAtCH,WAAO,IAAD,EACQZ,mBAAS,IADjB,mBACThB,EADS,KACH6B,EADG,OAEgBb,oBAAS,GAFzB,mBAETc,EAFS,KAECC,EAFD,KAGVC,EAAeC,SAASC,cAAc,QAYtCR,EAAe,WACnBK,GAAY,GACZC,EAAaG,UAAUC,OAAO,kBAQhC,OACE,yBAAK5C,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAU+B,WAvBK,SAACb,GAClBD,EAAYC,GAAYE,MAAK,SAAAyB,GAC3BR,EAAQQ,EAAUrC,KAAKsC,gBAsBR,IAAbR,GARJE,EAAaG,UAAUI,IAAI,iBACpB,kBAAC,EAAD,CAAOb,aAAcA,EAAcD,SAAUK,KAOZ,GACtC,kBAAC,EAAD,CACEhC,UApBe,SAAC0C,GACpBT,EAAYS,IAoBRxC,KAAMA,OC5BMyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFf,SAASgB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxC,MAAK,SAAAyC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e90daea3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst CharacterCard = (props) => {\r\n    const { name, description, picture } = props;\r\n\r\n    const onClickButton = () => {\r\n        props.openModal({ name, description, picture })\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"picture__container\">\r\n                <img src={picture} alt={name} title={name}></img>\r\n            </div>\r\n            <h3 className=\"character__name\">{name}</h3>\r\n            <button className=\"detail__button\" type=\"button\" onClick={onClickButton}>Ver detalle</button>\r\n        </>\r\n    )\r\n}\r\nexport default CharacterCard;","import React from 'react';\r\nimport CharacterCard from './CharacterCard';\r\n\r\nconst CharacterList = (props) => {\r\n    const { data, openModal } = props\r\n    return (\r\n        <ul className=\"list__container\">{data.map(item => <li className=\"character__container\" key={item.id}>\r\n            <CharacterCard\r\n                name={item.name}\r\n                description={item.description}\r\n                openModal={openModal}\r\n                picture={item.thumbnail.path + '.' + item.thumbnail.extension}\r\n            />\r\n        </li>)}</ul>\r\n    )\r\n}\r\nexport default CharacterList;","\r\nconst ENDPOINT = 'https://gateway.marvel.com:443/v1/public/characters?ts=1&limit=12&apikey=6d055bd0ed423bc8b88ae657a59a7a6d&hash=348fe3b8ab4464fbba8f113826c15a30';\r\nconst fetchResult = (inputValue) => fetch(\r\n    inputValue ? ENDPOINT + '&nameStartsWith=' + inputValue : ENDPOINT\r\n).then(response => response.json());\r\n\r\nexport default fetchResult;\r\n","import React, { useState } from 'react';\r\n\r\nconst Searcher = (props) =>{\r\n    const[ inputValue,setInputValue ] = useState('')\r\n\r\n    const handlerInputValue=(event)=>{\r\n        setInputValue(event.target.value);\r\n    }\r\n    \r\n    const getCharacters = () =>{\r\n        props.connectApi(inputValue)\r\n    }\r\n\r\n    return(\r\n        <div className=\"searcher__container\">\r\n            <input\r\n            placeholder=\"Ej: Thor\"\r\n            type=\"text\"\r\n            value={inputValue}\r\n            onChange={handlerInputValue}\r\n            />\r\n            <button className=\"searcher__button\" onClick={getCharacters}>Enviar</button>\r\n        </div>\r\n    )\r\n}\r\nexport default Searcher;","import React from 'react';\r\n\r\nconst Modal = (props) => {\r\n    const { heroData } = props\r\n\r\n    const closeModal = () => {\r\n        props.onCloseModal()\r\n    }\r\n\r\n    return (\r\n        <div className=\"modal__container\">\r\n            <div className=\"character__modal\">\r\n            <button className=\"close__modal\" onClick={closeModal}> Cerrar</button>\r\n            <div className=\"modal__image\">\r\n                <img src={heroData.picture} alt={heroData.name} name={heroData.name}></img>\r\n            </div>\r\n            <h3 className=\"modal__name\">{heroData.name}</h3>\r\n            <p>{heroData.description}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Modal","import React from 'react';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header><h2>Busca tu personaje Marvel</h2></header>\r\n    )\r\n}\r\nexport default Header;","import React, { useState } from 'react';\nimport CharacterList from './CharacterList';\nimport fetchResult from '../services/Fetch';\nimport Searcher from './Searcher';\nimport Modal from './Modal';\nimport Header from './Header';\nimport '../stylesheets/App.scss';\n\nconst App = () => {\n  const [data, setData] = useState([]);\n  const [infoHero, setInfoHero] = useState(false);\n  const appContainer = document.querySelector('.App');\n\n  const connectApi = (inputValue) => {\n    fetchResult(inputValue).then(respuesta => {\n      setData(respuesta.data.results)\n    })\n  }\n\n  const handlerModal = (hero) => {\n    setInfoHero(hero);\n  }\n\n  const onCloseModal = () => {\n    setInfoHero(false)\n    appContainer.classList.remove('hide-overflow')\n  }\n\n  const printModal = () => {\n    appContainer.classList.add('hide-overflow');\n    return <Modal onCloseModal={onCloseModal} heroData={infoHero} />\n  };\n \n  return (\n    <div className=\"App\">\n      <Header/>\n      <Searcher connectApi={connectApi} />\n      { infoHero !== false ? printModal() : ''}\n      <CharacterList\n        openModal={handlerModal}\n        data={data}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}